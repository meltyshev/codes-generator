{"version":3,"sources":["App.module.css","App.jsx","index.js"],"names":["module","exports","App","useState","dictionary","setDictionary","codes","setCodes","handleGenerateClick","useCallback","Array","map","Math","floor","random","length","min","max","useEffect","a","default","Container","Grid","padded","Row","Column","Button","fluid","content","onClick","TextArea","value","join","rows","className","styles","textarea","Loader","active","ReactDOM","render","document","getElementById"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,SAAW,wB,oOCY7B,IAwCeC,EAxCH,WAAO,IAAD,EACoBC,mBAAS,MAD7B,mBACTC,EADS,KACGC,EADH,OAEUF,mBAAS,IAFnB,mBAETG,EAFS,KAEFC,EAFE,KAIVC,EAAsBC,uBAAY,WACtCF,EAAS,YAAIG,MAAM,KAAKC,KAAI,2BACvBP,EAAWQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAWW,UAD1B,QATVC,EAU4D,GAVvDC,EAU2D,IAT7EL,KAAKC,MAAMD,KAAKE,UAAYG,EAAMD,EAAM,IAAMA,IADvD,IAAsBA,EAAKC,QAYtB,CAACb,IAQJ,OANAc,qBAAU,WACR,sBAAC,sBAAAC,EAAA,kEACCd,EADD,SACsB,kCADtB,mBACmDe,SADnD,wDAAD,KAGC,IAEEhB,EAKH,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACD,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,OAAK,EAACC,QAAQ,iFAAgBC,QAASrB,MAGlDF,EAAMS,OAAS,GACd,kBAACO,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACK,EAAA,EAAD,CAAUC,MAAOzB,EAAM0B,KAAK,MAAOC,KAAM3B,EAAMS,OAAQmB,UAAWC,IAAOC,eAd5E,kBAACC,EAAA,EAAD,CAAQC,QAAM,GAAd,iFCzBXC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.61392e35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"App_textarea__NtVfp\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  Button, Container, Grid, Loader, TextArea\n} from 'semantic-ui-react';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [codes, setCodes] = useState([]);\n\n  const handleGenerateClick = useCallback(() => {\n    setCodes([...Array(50)].map(() => (\n      `${dictionary[Math.floor(Math.random() * dictionary.length)]}${getRandomInt(10, 999)}`\n    )));\n  }, [dictionary]);\n\n  useEffect(() => {\n    (async () => {\n      setDictionary((await import('./dictionary.json')).default);\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Button fluid content=\"Сгенерировать\" onClick={handleGenerateClick} />\n          </Grid.Column>\n        </Grid.Row>\n        {codes.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <TextArea value={codes.join('\\n')} rows={codes.length} className={styles.textarea} />\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}